boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))
# divide graph area in 2 columns
par(mfrow=c(1, 2))
# box plot for 'speed'
boxplot(cars$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars$speed)$out))
# box plot for 'distance'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))
par(mfrow=c(1, 2))
# box plot for 'speed'
boxplot(cars$speed, main="Speed", sub=paste("Outlier rows: ", boxplot.stats(cars$speed)$out))
# box plot for 'distance'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))
# box plot for 'speed'
boxplot(cars$speed)
# box plot for 'speed'
boxplot(cars$speed,  main="Speed")
boxplot(cars$speed, main="Speed", sub = paste("Outlier rows: ", boxplot.stats(cars$speed)$out))
boxplot(cars$speed,  main="Speed")
boxplot(cars$speed, main="Speed", sub = paste("Outlier rows: ", boxplot.stats(cars$speed)$out))
# box plot for 'distance'
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))
boxplot(cars$speed, main="Speed", sub = paste("Outlier rows: ", boxplot.stats(cars$speed)$out))
boxplot.stats(cars$speed)$out
boxplot.stats(cars$dist)$out
# divide graph area in 2 columns
par(mfrow=c(1, 2))
# box plot for 'speed'
boxplot(cars$speed,  main="Speed")
# box plot for 'speed'
boxplot(cars$speed,  main="Distance")
# box plot for 'speed'
boxplot(cars$speed,  main="Speed")
# box plot for 'speed'
boxplot(cars$speed,  main="Distance")
# box plot for 'speed'
boxplot(cars$speed,  main="Distance")
# box plot for 'speed'
boxplot(cars$dist,  main="Distance")
# Visualize two figures side by side
par(mfrow=c(1, 2)) # divide graph area in 2 columns
par(mfrow=c(1, 2)) # divide graph area in 2 columns
boxplot(cars$speed, main="Speed", sub = paste("Outlier rows: ", boxplot.stats(cars$speed)$out))
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))
par(mfrow=c(1, 2)) # divide graph area in 2 columns
boxplot(cars$speed, main="Speed", sub = paste("Outlier rows: ", boxplot.stats(cars$speed)$out))
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))
par(mfrow=c(1, 2)) # divide graph area in 2 columns
boxplot(cars$speed, main="Speed", sub = paste("Outlier rows: ", boxplot.stats(cars$speed)$out))
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))
head(mtcars)
?mtcars
scatter.smooth(cars$qsec ~ cars$mpg)
scatter.smooth(mtcars$qsec ~ mtcars$mpg)
# Add axes and text
scatter.smooth(cars$dist ~ cars$cyl,
main="Dist ~ Speed",
xlab="Speed (mph)",
ylab="Stopping distance (ft)",
col="orange")
scatter.smooth(mtcars$qsec ~ mtcars$cyl)
scatter.smooth(mtcars$wt ~ mtcars$cyl)
# Create a scatter plot
scatter.smooth(cars$dist ~ cars$speed)
# Add axes and text
scatter.smooth(cars$dist ~ cars$speed,
main="Dist ~ Speed",
xlab="Speed (mph)",
ylab="Stopping distance (ft)",
col="orange")
# box plot for 'speed'
boxplot(cars$speed,  main="Speed")
# box plot for 'speed'
boxplot(cars$dist,  main="Distance")
# Visualize two figures side by side and add notes (run the following 3 rows at the same time)
par(mfrow=c(1, 2)) # divide graph area in 2 columns
boxplot(cars$speed, main="Speed", sub = paste("Outlier rows: ", boxplot.stats(cars$speed)$out))
boxplot(cars$dist, main="Distance", sub=paste("Outlier rows: ", boxplot.stats(cars$dist)$out))
## Chek
Create a box plot for each of the variables: `speed` (numeric	Speed (mph))  and `dist` (numeric	Stopping distance (ft)) from the cars data set. See if there is any outlier based on the 1.5 x interquartile-range (1.5 * IQR) rule.
hist(cars$dist)
# histogram with different number of bins
hist(cars$dist, breaks = 12)
# histogram with different number of bins
hist(cars$dist, breaks = 20)
# histogram with different number of bins
hist(cars$dist, breaks = 20)
# histogram with different number of bins and change color
hist(cars$dist, breaks = 20, col = "gray")
hist(cars$dist, breaks = 20, col = "gray", freq = FALSE)
hist(cars$dist, breaks = 20, col = "gray", freq = FALSE)
hist(cars$dist, freq = FALSE)
# simple histogram
density(cars$dist)
density(cars$dist)
# plot the results
plot(density(cars$dist))
# plot the results (Method 2)
d <- density(cars$dist)
plot(d)
?car
?cars
# returns density data
qplot(cars$dist)
# returns density data
qqplot(cars$dist)
# returns density data
qqnorm(cars$dist)
# returns density data
qqnorm(cars$dist)
# create a normal QQ plot
qqnorm(cars$dist)
# add a reference line
qqline(cars$dist)
# create a normal QQ plot
qqnorm(cars$dist)
# add a reference line
qqline(cars$dist)
qqnorm(cars$dist)
# add a reference line
qqline(cars$dist)
lm(cars$dist ~ cars$speed)
# run the regression model (Method 2)
lm(dist ~ speed, data = cars)
# check the summary
reg <- lm(dist ~ speed, data = cars)
?lm
# check the summary
LinearModel <- lm(dist ~ speed, data = cars)
summary(LinearModel)
# fit the regression model (Method 2)
lm(dist ~ speed, data = cars)
summary(LinearModel)
summary(LinearModel)
?summary
# check the summary
LinearModel <- lm(dist ~ speed, data = cars)
summary(LinearModel)
summary(LinearModel)
LMSummary <- summary(LinearModel)
LMSummary$coefficients
# model coefficients
LMSummary$df
# model df
LMSummary$df
# model df
LMSummary$fstatistic[1]
# model df
LMSummary$fstatistic
LMSummary$R-squared
LMSummary$Rsquared
LMSummary
# Method 1
t.test(mtcars$mpg, mtcars$am)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Display the internal structure of an R object.
str(cars)
# Check the dimension of an object
dim(cars)
# Check the variables
?cars
#par(mar=c(1,1,1,1)) # change figure margins if you encounter errors
# Create a scatter plot
scatter.smooth(cars$dist ~ cars$speed)
# Add axes and text
scatter.smooth(cars$dist ~ cars$speed,
main="Dist ~ Speed",
xlab="Speed (mph)",
ylab="Stopping distance (ft)",
col="orange")
# create a normal QQ plot
qqnorm(cars$dist)
# create a normal QQ plot and add a reference line (Run the two lines at the same time)
qqnorm(cars$dist)
qqline(cars$dist)
# fit the regression model (Method 1)
lm(cars$dist ~ cars$speed)
# fit the regression model (Method 2)
lm(dist ~ speed, data = cars)
LMSummary <- summary(LinearModel)
# model coefficients
LMSummary$coefficients
# model F-statistic
LMSummary$fstatistic
library(tidyverse)
data
data("marketing", package = "datarium")
library(tidyverse)
data("marketing", package = "datarium")
We are going to use `mtcars` data included in R by default. We will load and print the cars data.
data
## Load Data
We are going to use `mtcars` data included in R by default. We will load and print the mtcars data.
```{r, eval=FALSE}
# 1. Loading
data(mtcars)
# 1. Loading
data(mtcars)
# 2. Print
head(mtcars)
# fit the regression model (Method 1)
lm(mpg ~ disp + hp + wt, data = input)
# fit the regression model (Method 1)
lm(mpg ~ disp + hp + wt, data = mtcars)
# fit the regression model
lm(mpg ~ disp + hp + wt, data = mtcars)
# fit the regression model
lm(mpg ~ disp + wt, data = mtcars)
## Produce a summary of the model fitting
Produce a summary of the results of the model fitting using `summary` funciton.
```{r, eval=FALSE}
# check the summary
LinearModel <- lm(dist ~ speed, data = cars)
summary(LinearModel)
```
## Checking for statistical significance
Check coefficients, F-statistic, and R-squared
```{r, eval=FALSE}
LMSummary <- summary(LinearModel)
# check the summary
MulipleModel <- lm(mpg ~ disp + wt, data = mtcars)
summary(MulipleModel)
# check the summary
MulipleModel <- lm(mpg ~ disp + hp + wt, data = mtcars)
summary(MulipleModel)
?mtcars
## Fit a multiple linear regression model
Fit a linear model with the function `lm()`. Regress the outcome variable `mpg`(Miles/(US) gallon) on the exploratory variables `cyl` (Number of cylinders), `hp` and`wt` (Weight (1000 lbs)).
```{r, eval=FALSE}
# fit the regression model
lm(mpg ~ disp + wt, data = mtcars)
?mtcars
```
# fit the regression model
lm(mpg ~ cyl + wt, data = mtcars)
?mtcars
# check the summary
MulipleModel <- lm(mpg ~ disp + hp + wt, data = mtcars)
# check the summary
MulipleModel <- lm(mpg ~ cyl + wt, data = mtcars)
summary(MulipleModel)
# fit the regression model
lm(mpg ~ cyl + wt + am, data = mtcars)
# check the summary
MulipleModel <- lm(mpg ~ cyl + wt + a,, data = mtcars)
# check the summary
MulipleModel <- lm(mpg ~ cyl + wt + am, data = mtcars)
summary(MulipleModel)
# fit the regression model
lm(mpg ~ cyl + wt + vs, data = mtcars)
?mtcars
# check the summary
MulipleModel <- lm(mpg ~ cyl + wt + vs, data = mtcars)
summary(MulipleModel)
## Produce a summary of the model fitting
Produce a summary of the results of the model fitting using `summary` funciton.
```{r, eval=FALSE}
# check the summary
MulipleModel <- lm(mpg ~ cyl + wt + vs, data = mtcars)
summary(MulipleModel)
```
# check the summary
MulipleModel <- lm(mpg ~ cyl + wt + vs, data = mtcars)
summary(MulipleModel)
# Create a simple scatter plot
plot(cars$dist ~ cars$speed)
# Create a simple scatter plot
plot(cars$dist ~ cars$speed)
# Create a simple scatter plot (Method 1)
plot(cars$dist ~ cars$speed)
# Create a simple scatter plot (Method 2)
plot(dist ~ speed, data = cars)
# Create a simple scatter plot (Method 1)
cor(mtcars, use="complete.obs", method="kendall")
# Create a simple scatter plot (Method 1)
cor(dist ~ speed, data = cars)
# Create a simple scatter plot (Method 1)
cor(dist, speed, data = cars)
# Create a simple scatter plot (Method 1)
cor(cars$dist ~ cars$speed)
# Create a simple scatter plot (Method 1)
cor(cars$dist, cars$speed)
# Create a simple scatter plot (Method 1)
cor(cars$dist, cars$speed)
# Create a simple scatter plot (Method 1)
cor.test(cars$dist, cars$speed)
# Create a simple scatter plot (Method 1)
cor(cars$dist, cars$speed)
#par(mar=c(1,1,1,1)) # change figure margins if you encounter errors
cor(cars$speed, cars$dist)
# Compute correlation
cor(cars$speed, cars$dist)
# Significant testing
cor.test(cars$dist, cars$speed)
?cor.tes
?cor.test
# Statistical testing for associatin between the two variables
cor.test(cars$dist, cars$speed)
# Compute correlation
cor(cars$speed, cars$dist)
# Statistical testing for associatin between the two variables
cor.test(cars$dist, cars$speed)
# Compute correlation
cor(cars$speed, cars$dist)
# Statistical testing for associatin between the two variables
cor.test(cars$dist, cars$speed)
# Correlation for the entire data set
corr(cars)
# Correlation for the entire data set
cor(cars)
cor.test(cars)
# Correlation for the entire data set
cor(cars)
# 1. Loading
data(sleep)
# 2. Print
head(sleep)
# box plot for 'speed'
boxplot(sleep$extra,  main="Speed")
# box plot for 'speed'
boxplot(sleep$extra,  main="Extra")
# box plot for 'speed'
boxplot(cars$group,  main="Group")
# box plot for 'speed'
boxplot(sleep$group,  main="Group")
# box plot for 'speed'
boxplot(sleep$group,  main="Group")
# box plot for 'speed'
boxplot(sleep$extra,  main="Extra")
# box plot for 'speed'
boxplot(sleep$group,  main="Group")
# Create a freqeuncy table for the "group" column
table(sleep$group)
# box plot for 'speed'
boxplot(sleep$extra,  main="Extra")
boxplot(cars$speed, main="Speed", sub = paste("Outlier rows: ", boxplot.stats(cars$speed)$out))
boxplot(sleep$extra, main="Extra", sub = paste("Outlier rows: ", boxplot.stats(cars$speed)$out))
boxplot(sleep$extra, main="Extra", sub = paste("Outlier rows: ", boxplot.stats(sleep$extra)$out))
# plot the results
d2 <- density(sleep$extra)
plot(d2)
# histogram with different number of bins and change color
hist(sleep$extra, breaks = 20, col = "gray")
# histogram with different number of bins and change color
hist(sleep$extra, breaks = 10, col = "gray")
# histogram with different number of bins and change color
hist(sleep$extra, breaks = 5, col = "gray")
# histogram with different number of bins and change color
hist(sleep$extra, breaks = 4, col = "gray")
# histogram with different number of bins and change color
hist(sleep$extra, breaks = 5, col = "gray")
# histogram with different number of bins and change color
hist(sleep$extra, breaks = 7, col = "gray")
# histogram with different number of bins and change color
hist(sleep$extra, breaks = 5, col = "gray")
# returns density data
density(cars$dist)
# create a normal QQ plot
qqnorm(cars$dist)
# create a normal QQ plot
qqnorm(sleep$extra)
# create a normal QQ plot and add a reference line (Run the two lines at the same time)
qqnorm(sleep$extra)
qqline(sleep$extra)
qqnorm(sleep$extra)
qqline(sleep$extra)
# fit the regression model
lm(extra ~ group, data = sleep)
# fit the regression model
lm(extra ~ group, data = sleep)
# check the summary
LinearModel2 <- lm(extra ~ group, data = sleep)
summary(LinearModel2)
# 1. Loading
data(Prestige)
# 1. Loading
library(car)
data(Prestige)
# 2. Load the data
data(Prestige)
# 2. Print
head(Prestige)
# A question mark is a shorcut for the "help" function.
?Prestige
# Summary of the "extra" column
summary(Prestige$income)
# Check the dimension of an object
dim(Prestige)
# Display the internal structure of an R object.
str(Prestige)
# Summary of the "income" column
summary(Prestige$income)
# Summary of the "group" column
summary(Prestige$education)
# Create a freqeuncy table for the "group" column
table(Prestige$education)
# Summary of the "group" column
summary(Prestige$education)
## Visualize your outcome variable and check for outliers
Use the `boxplot` funciton to create a boxplot for each variable: `income` (Average income of incumbents, dollars, in 1971.)  and `education` (Average education of occupational incumbents, years, in 1971) from the cars data set. See if there is any outlier based on the 1.5 x interquartile-range (1.5 * IQR) rule.
```{r, eval=FALSE}
# box plot for 'income'
boxplot(sleep$income, main="Extra")
boxplot(sleep$income, main="Extra", sub = paste("Outlier rows: ", boxplot.stats(sleep$extra)$out))
```
Prestige
# box plot for 'income'
boxplot(Prestige$income, main="Extra")
boxplot(Prestige$income, main="Extra", sub = paste("Outlier rows: ", boxplot.stats(sleep$extra)$out))
boxplot(Prestige$income, main="Extra", sub = paste("Outlier rows: ", boxplot.stats(Prestige$income)$out))
# box plot for 'income'
boxplot(Prestige$income, main="Extra")
boxplot(Prestige$income, main="Extra", sub = paste("Outlier rows: ", boxplot.stats(Prestige$income)$out))
boxplot.stats(Prestige$income)$out
# Check the outliers
boxplot.stats(Prestige$income)$out
boxplot(Prestige$income, main="Extra", sub = paste("Outlier rows: ", boxplot.stats(Prestige$income)$out))
boxplot(Prestige$education, main="Education", sub = paste("Outlier rows: ", boxplot.stats(Prestige$education)$out))
# box plot for 'education'
boxplot(Prestige$education, main="Education")
boxplot(Prestige$education, main="Education", sub = paste("Outlier rows: ", boxplot.stats(Prestige$education)$out))
# histogram with different number of bins and change color
hist(Prestige$income, breaks = 5, col = "gray")
# plot the results
d2 <- density(Prestige$income)
plot(d2)
qqline(sleep$extra)
qqline(Prestige$income)
# create a normal QQ plot and add a reference line (Run the two lines at the same time)
qqnorm(Prestige$income)
qqline(Prestige$income)
qqnorm(Prestige$income)
qqline(Prestige$income)
# fit the regression model
lm(income ~ education, data = sleep)
# fit the regression model
lm(income ~ education, data = Prestige)
# check the summary
LinearModel2 <- lm(income ~ education, data = Prestige)
summary(LinearModel2)
# box plot for 'education'
boxplot(Prestige$education, main="Education")
# Check the outliers for 'income'
boxplot(Prestige$education, main="Education", sub = paste("Outlier rows: ", boxplot.stats(Prestige$education)$out))
# Check the outliers for 'income'
boxplot(Prestige$education, main="Education", sub = paste("Outlier rows: ", boxplot.stats(Prestige$education)$out))
# plot the results
d2 <- density(Prestige$prestige)
plot(d2)
# box plot for 'prestige'
boxplot(Prestige$prestige, main="Income")
boxplot(Prestige$prestige, main="Income", sub = paste("Outlier rows: ", boxplot.stats(Prestige$income)$out))
boxplot(Prestige$prestige, main="Income", sub = paste("Outlier rows: ", boxplot.stats(Prestige$prestige)$out))
# box plot for 'prestige'
boxplot(Prestige$prestige, main="Income")
# box plot for 'prestige'
boxplot(Prestige$prestige, main="Prestige")
boxplot(Prestige$prestige, main="Prestige", sub = paste("Outlier rows: ", boxplot.stats(Prestige$prestige)$out))
?Pristige
?Prestige
## Visualize your outcome variable and check for outliers
Use the `boxplot` funciton to create a boxplot for each variable: `income` (Average income of incumbents, dollars, in 1971.), `education` (Average education of occupational incumbents, years, in 1971), `prestige` (Pineo-Porter prestige score for occupation, from a social survey conducted in the mid-1960s) from the cars data set. See if there is any outlier based on the 1.5 x interquartile-range (1.5 * IQR) rule.
```{r, eval=FALSE}
?Prestige
# box plot for 'income'
boxplot(Prestige$income, main="Income")
boxplot(Prestige$income, main="Income", sub = paste("Outlier rows: ", boxplot.stats(Prestige$income)$out))
# box plot for 'prestige'
boxplot(Prestige$prestige, main="Prestige")
boxplot(Prestige$prestige, main="Prestige", sub = paste("Outlier rows: ", boxplot.stats(Prestige$prestige)$out))
# Display the internal structure of an R object.
str(Prestige)
# Check the dimension of an object
dim(Prestige)
# Summary of the "income" column
summary(Prestige$income)
# Summary of the "group" column
summary(Prestige$education)
# box plot for 'income'
boxplot(Prestige$income, main="Income")
boxplot(Prestige$income, main="Income", sub = paste("Outlier rows: ", boxplot.stats(Prestige$income)$out))
# histogram with different number of bins and change color
hist(Prestige$income, breaks = 5, col = "gray")
# histogram with different number of bins and change color
hist(Prestigeprestige, breaks = 5, col = "gray")
# histogram with different number of bins and change color
hist(Prestige$prestige, breaks = 5, col = "gray")
# histogram with different number of bins and change color
hist(Prestige$prestige, breaks = 10, col = "gray")
# plot the results
d2 <- density(Prestige$prestige)
plot(d2)
# create a normal QQ plot and add a reference line (Run the two lines at the same time)
qqnorm(Prestige$prestige)
qqline(Prestige$prestige)
qqnorm(Prestige$prestige)
qqline(Prestige$prestige)
# fit the regression model
lm(prestige ~ education, data = Prestige)
# check the summary
LinearModel2 <- lm(prestige ~ education, data = Prestige)
summary(LinearModel2)
